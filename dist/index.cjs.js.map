{"version":3,"file":"index.cjs.js","sources":["../src/dictionaries.js","../src/utils.js","../src/index.js"],"sourcesContent":["// src/dictionaries.js\n\n// 1) All single‐letter mappings Latin→Cyrillic\nexport const LAT_TO_CYR = {\n  a: \"а\", b: \"б\", c: \"ц\", d: \"д\", e: \"е\",\n  f: \"ф\", g: \"г\", h: \"х\", i: \"и\", j: \"ј\",\n  k: \"к\", l: \"л\", m: \"м\", n: \"н\", o: \"о\",\n  p: \"п\", q: \"\", r: \"р\", s: \"с\", t: \"т\",\n  u: \"у\", v: \"в\", w: \"\", x: \"\", y: \"\", z: \"з\",\n  A: \"А\", B: \"Б\", C: \"Ц\", D: \"Д\", E: \"Е\",\n  F: \"Ф\", G: \"Г\", H: \"Х\", I: \"И\", J: \"Ј\",\n  K: \"К\", L: \"Л\", M: \"М\", N: \"Н\", O: \"О\",\n  P: \"П\", Q: \"\", R: \"Р\", S: \"С\", T: \"Т\",\n  U: \"У\", V: \"В\", W: \"\", X: \"\", Y: \"\", Z: \"З\",\n  \"č\": \"ч\", \"ć\": \"ћ\", \"đ\": \"ђ\", \"ž\": \"ж\", \"š\": \"ш\",\n  \"Č\": \"Ч\", \"Ć\": \"Ћ\", \"Đ\": \"Ђ\", \"Ž\": \"Ж\", \"Š\": \"Ш\"\n};\n\n// 2) Single‐letter mapping Cyrillic→Latin\nexport const CYR_TO_LAT = {\n  \"а\": \"a\", \"б\": \"b\", \"ц\": \"c\", \"д\": \"d\", \"е\": \"e\",\n  \"ф\": \"f\", \"г\": \"g\", \"х\": \"h\", \"и\": \"i\", \"ј\": \"j\",\n  \"к\": \"k\", \"л\": \"l\", \"м\": \"m\", \"н\": \"n\", \"о\": \"o\",\n  \"п\": \"p\", \"р\": \"r\", \"с\": \"s\", \"т\": \"t\", \"у\": \"u\",\n  \"в\": \"v\", \"з\": \"z\",\n\n  \"А\": \"A\", \"Б\": \"B\", \"Ц\": \"C\", \"Д\": \"D\", \"Е\": \"E\",\n  \"Ф\": \"F\", \"Г\": \"G\", \"Х\": \"H\", \"И\": \"I\", \"Ј\": \"J\",\n  \"К\": \"K\", \"Л\": \"L\", \"М\": \"M\", \"Н\": \"N\", \"О\": \"O\",\n  \"П\": \"P\", \"Р\": \"R\", \"С\": \"S\", \"Т\": \"T\", \"У\": \"U\",\n  \"В\": \"V\", \"З\": \"Z\",\n\n  \"ч\": \"č\", \"ћ\": \"ć\", \"ж\": \"ž\", \"ш\": \"š\",\n  \"љ\": \"lj\", \"њ\": \"nj\", \"ђ\": \"đ\", \"џ\": \"dz\",\n\n  \"Ч\": \"Č\", \"Ћ\": \"Ć\", \"Ж\": \"Ž\", \"Ш\": \"Š\",\n  \"Љ\": \"Lj\", \"Њ\": \"Nj\", \"Ђ\": \"Đ\", \"Џ\": \"Dž\"\n};\n\n\n// 3) Chained double‐letter Latin→Cyrillic (e.g. “nj”→“њ”)\nexport const LAT_TO_CYR_CHAINED = {\n  l: { j: \"љ\" },\n  n: { j: \"њ\" },\n  d: { j: \"ђ\", z: \"џ\", ž: \"џ\" },\n  L: { j: \"Љ\", J: \"Љ\" },\n  N: { j: \"Њ\", J: \"Њ\" },\n  D: { j: \"Ђ\", J: \"Ђ\", z: \"Џ\", Z: \"Џ\", ž: \"Џ\", Ž: \"Џ\" }\n};\n\n// 4) Words to ignore (exact matches) Latin→Cyrillic\nexport const IGNORE_LIST_LAT_TO_CYR = {\n  plugin: \"\",\n  lat: \"\",\n  close: \"\",\n  jquery: \"jQuery\",\n  microsoft: \"Microsoft\",\n  firefox: \"Firefox\",\n  opera: \"Opera\",\n  safari: \"Safari\",\n  chrome: \"Chrome\",\n  ie: \"IE\"\n  // … you can add more\n};\n\n// 5) Words to ignore (exact matches) Cyrillic→Latin\nexport const IGNORE_LIST_CYR_TO_LAT = {\n  \"ћир\": \"\"\n  // … add more if needed\n};\n\n// 6) Base substrings that forbid chaining (e.g. any word containing “nadžrel” should NOT chain “dž”)\nexport const IGNORE_SUBSTRINGS_DOUBLE_CHAIN = [\n  \"anjon\", \"adjektiv\", \"adjunkt\", \"budzašto\", \"vanjezič\",\n  \"injekt\", \"injekc\", \"konjug\", \"konjunk\", \"lindzi\", \"nadždrel\",\n  \"nadzemn\", \"nadžet\", \"nadžive\", \"nadžup\", \"podzakon\", \"predživot\",\n  // … (copy the entire array from original)\n];\n\n// 7) Specific full‐word exceptions for double‐letter chaining\nexport const IGNORE_FULL_WORDS_DOUBLE_CHAIN = [\n  \"njemačku\"\n];\n","// src/utils.js\n\nimport {\n  IGNORE_LIST_LAT_TO_CYR,\n  IGNORE_LIST_CYR_TO_LAT,\n  IGNORE_SUBSTRINGS_DOUBLE_CHAIN,\n  IGNORE_FULL_WORDS_DOUBLE_CHAIN,\n  LAT_TO_CYR_CHAINED\n} from \"./dictionaries.js\";\n\n/**\n * isIgnoredWord(word, direction)\n *  - direction = \"L2C\" or \"C2L\"\n */\nexport function isIgnoredWord(word, direction) {\n  const lower = word.toString().toLowerCase();\n  if (direction === \"L2C\") {\n    return Object.prototype.hasOwnProperty.call(IGNORE_LIST_LAT_TO_CYR, lower);\n  } else {\n    return Object.prototype.hasOwnProperty.call(IGNORE_LIST_CYR_TO_LAT, lower);\n  }\n}\n\n/**\n * getIgnoreReplacement(word, direction)\n *  - returns the replacement if ignore, or null otherwise\n */\nexport function getIgnoreReplacement(word, direction) {\n  const lower = word.toString().toLowerCase();\n  if (direction === \"L2C\") {\n    return IGNORE_LIST_LAT_TO_CYR[lower] === \"\" ? word : IGNORE_LIST_LAT_TO_CYR[lower];\n  } else {\n    return IGNORE_LIST_CYR_TO_LAT[lower] === \"\" ? word : IGNORE_LIST_CYR_TO_LAT[lower];\n  }\n}\n\n/**\n * shouldChainDoubleLetter(word)\n *  - returns false if word is exactly in IGNORE_FULL_WORDS_DOUBLE_CHAIN\n *    OR contains any of the IGNORE_SUBSTRINGS_DOUBLE_CHAIN\n */\nexport function shouldChainDoubleLetter(word) {\n  const lower = word.toString().toLowerCase();\n  if (IGNORE_FULL_WORDS_DOUBLE_CHAIN.includes(lower)) return false;\n  for (const substr of IGNORE_SUBSTRINGS_DOUBLE_CHAIN) {\n    if (lower.includes(substr)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * splitTextPreserveDelimiters(str, includeUnicode = true)\n *  - Splits on any non‐alphanumeric or (if includeUnicode) on any non‐cyrillic‐unicode.\n *  - Returns an array of tokens, including separators.\n */\nexport function splitTextPreserveDelimiters(str, includeUnicode = true) {\n  let pattern;\n  if (includeUnicode) {\n    // Covers basic Latin+digits + Cyrillic block + čĆžŠđĐ\n    pattern = \"[^0-9a-zA-Z\\u0400-\\u04FF_\\u010D\\u010C\\u0107\\u0106\\u017E\\u017D\\u0161\\u0160\\u0111\\u0110]+\";\n  } else {\n    pattern = \"[^0-9a-zA-Z_\\u010D\\u010C\\u0107\\u0106\\u017E\\u017D\\u0161\\u0160\\u0111\\u0110]+\";\n  }\n  const regex = new RegExp(\"(\" + pattern + \")\", \"i\");\n  // Test if `split` natively retains delimiters:\n  if (\"test\".split(/([^a-z])/).length === 3) {\n    return str.split(regex);\n  }\n  // Otherwise use a fallback\n  const parts = [];\n  let lastIndex = 0;\n  let match;\n  const globalRegex = new RegExp(regex, \"gi\");\n  while ((match = globalRegex.exec(str)) !== null) {\n    const idx = match.index;\n    if (idx > lastIndex) {\n      parts.push(str.slice(lastIndex, idx));\n    }\n    parts.push(match[0]);\n    lastIndex = globalRegex.lastIndex;\n  }\n  if (lastIndex < str.length) {\n    parts.push(str.slice(lastIndex));\n  }\n  return parts.length ? parts : [str];\n}\n","// src/index.js\n\nimport {\n  LAT_TO_CYR,\n  CYR_TO_LAT,\n  LAT_TO_CYR_CHAINED\n} from \"./dictionaries.js\";\n\nimport {\n  splitTextPreserveDelimiters,\n  isIgnoredWord,\n  getIgnoreReplacement,\n  shouldChainDoubleLetter\n} from \"./utils.js\";\n\n// Default configuration\nconst DEFAULT_CONFIG = {\n  ignoreClasses: [\"language\"],\n  ignoreListIncludeUnicode: true,\n  benchmark: false,\n  benchmarkCallback: (t) => console.log(`Execution time: ${t}ms`)\n};\n\nexport class CyrillicLatinConverter {\n  /**\n   * @param {Object} options\n   *   - ignoreClasses: array of CSS classes to skip during DOM traversal\n   *   - ignoreListIncludeUnicode: boolean (split‐pattern choice)\n   *   - benchmark: boolean\n   *   - benchmarkCallback: function(milliseconds)\n   */\n  constructor(options = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...options };\n  }\n\n  /**\n   * Convert a single string from Latin→Cyrillic.\n   * Returns a new string.\n   */\n  toCyrillic(text) {\n    return this._replaceL2C(text);\n  }\n\n  /**\n   * Convert a single string from Cyrillic→Latin.\n   * Returns a new string.\n   */\n  toLatin(text) {\n    return this._replaceC2L(text);\n  }\n\n  /**\n   * Walks the DOM (selector can be a CSS selector string or an Element)\n   * and replaces text nodes & placeholders in inputs.\n   *\n   * direction = \"L2C\" or \"C2L\"\n   */\n  convertInDOM(root, direction) {\n    if (this.config.benchmark) {\n      this._benchStart = performance.now();\n    }\n\n    const rootNode =\n      typeof root === \"string\" ? document.querySelector(root) : root;\n    if (!rootNode) {\n      throw new Error(`Invalid root selector/element: ${root}`);\n    }\n    this._traverseAndConvert(rootNode, direction);\n\n    if (this.config.benchmark) {\n      const elapsed = Math.round(performance.now() - this._benchStart);\n      this.config.benchmarkCallback(elapsed);\n    }\n  }\n\n  /**\n   * Private: Recursively traverse child nodes.\n   */\n  _traverseAndConvert(node, direction) {\n    // Skip certain tags entirely:\n    const skipTags = new Set([\"iframe\", \"script\", \"style\", \"code\", \"pre\"]);\n    if (\n      node.nodeType === Node.ELEMENT_NODE &&\n      skipTags.has(node.tagName.toLowerCase())\n    ) {\n      return;\n    }\n\n    // If element has an “ignore” CSS class, skip subtree:\n    if (\n      node.nodeType === Node.ELEMENT_NODE &&\n      this._hasIgnoredClass(node)\n    ) {\n      return;\n    }\n\n    // If this is a text node, replace its contents:\n    if (node.nodeType === Node.TEXT_NODE) {\n      const original = node.textContent;\n      const replaced =\n        direction === \"L2C\" ? this._replaceL2C(original) : this._replaceC2L(original);\n      if (replaced !== original) {\n        node.textContent = replaced;\n      }\n    }\n\n    // If it’s an element with a placeholder (e.g. <input>), replace that too:\n    if (\n      node.nodeType === Node.ELEMENT_NODE &&\n      node.hasAttribute(\"placeholder\")\n    ) {\n      const ph = node.getAttribute(\"placeholder\");\n      const newPh =\n        direction === \"L2C\" ? this._replaceL2C(ph) : this._replaceC2L(ph);\n      if (newPh !== ph) {\n        node.setAttribute(\"placeholder\", newPh);\n      }\n    }\n\n    // Recurse into children:\n    if (node.childNodes && node.childNodes.length > 0) {\n      node.childNodes.forEach((child) =>\n        this._traverseAndConvert(child, direction)\n      );\n    }\n  }\n\n  /** Check if any of the ignore‐classes is present on this element or an ancestor. */\n  _hasIgnoredClass(el) {\n    const { ignoreClasses } = this.config;\n    let curr = el;\n    while (curr && curr !== document) {\n      if (curr.classList) {\n        for (const cls of ignoreClasses) {\n          if (curr.classList.contains(cls)) {\n            return true;\n          }\n        }\n      }\n      curr = curr.parentNode;\n    }\n    return false;\n  }\n\n  /**\n   * Internal: replace Latin→Cyrillic for a single string.\n   */\n  _replaceL2C(str) {\n    const tokens = splitTextPreserveDelimiters(\n      str,\n      this.config.ignoreListIncludeUnicode\n    );\n\n    const out = tokens.map((tok) => {\n      // 1) If this word is in the “ignore‐list”, return its forced replacement:\n      if (isIgnoredWord(tok, \"L2C\")) {\n        return getIgnoreReplacement(tok, \"L2C\");\n      }\n\n      // 2) Now, we attempt to transliterate character‐by‐character\n      //    while respecting “chained” double‐letters (e.g. “nj” → “њ”).\n      if (!tok || tok.trim() === \"\") return tok;\n\n      let chars = Array.from(tok); // splits into array of characters\n      let result = [];\n\n      for (let i = 0; i < chars.length; i++) {\n        const c = chars[i];\n        let replaced = null;\n        let skipNext = false;\n\n        // Check if we can chain double‐letter (only if shouldChainDoubleLetter returns true)\n        if (shouldChainDoubleLetter(tok) && LAT_TO_CYR_CHAINED[c]) {\n          const next = chars[i + 1];\n          if (next && LAT_TO_CYR_CHAINED[c][next]) {\n            replaced = LAT_TO_CYR_CHAINED[c][next];\n            skipNext = true;\n          }\n        }\n\n        if (skipNext) {\n          result.push(replaced);\n          i++; // skip the next character\n        } else {\n          result.push(LAT_TO_CYR[c] || c);\n        }\n      }\n\n      return result.join(\"\");\n    });\n\n    return out.join(\"\");\n  }\n\n  /**\n   * Internal: replace Cyrillic→Latin for a single string.\n   */\n  _replaceC2L(str) {\n    const tokens = splitTextPreserveDelimiters(\n      str,\n      this.config.ignoreListIncludeUnicode\n    );\n\n    const out = tokens.map((tok) => {\n      if (isIgnoredWord(tok, \"C2L\")) {\n        return getIgnoreReplacement(tok, \"C2L\");\n      }\n      if (!tok || tok.trim() === \"\") return tok;\n\n      // Simplest: one-to-one character mapping (no chaining needed, since “lj”, “nj”, etc. already exist as single codes in CYR_TO_LAT)\n      return Array.from(tok)\n        .map((c) => CYR_TO_LAT[c] || c)\n        .join(\"\");\n    });\n\n    return out.join(\"\");\n  }\n}\n"],"names":["LAT_TO_CYR","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","CYR_TO_LAT","LAT_TO_CYR_CHAINED","ž","Ž","IGNORE_LIST_LAT_TO_CYR","plugin","lat","close","jquery","microsoft","firefox","opera","safari","chrome","ie","IGNORE_LIST_CYR_TO_LAT","IGNORE_SUBSTRINGS_DOUBLE_CHAIN","IGNORE_FULL_WORDS_DOUBLE_CHAIN","isIgnoredWord","word","direction","lower","toString","toLowerCase","Object","prototype","hasOwnProperty","call","getIgnoreReplacement","shouldChainDoubleLetter","includes","substr","splitTextPreserveDelimiters","str","includeUnicode","pattern","regex","RegExp","split","length","parts","match","lastIndex","globalRegex","exec","idx","index","push","slice","DEFAULT_CONFIG","ignoreClasses","ignoreListIncludeUnicode","benchmark","benchmarkCallback","console","log","constructor","options","this","config","toCyrillic","text","_replaceL2C","toLatin","_replaceC2L","convertInDOM","root","_benchStart","performance","now","rootNode","document","querySelector","Error","_traverseAndConvert","elapsed","Math","round","node","skipTags","Set","nodeType","Node","ELEMENT_NODE","has","tagName","_hasIgnoredClass","TEXT_NODE","original","textContent","replaced","hasAttribute","ph","getAttribute","newPh","setAttribute","childNodes","forEach","child","el","curr","classList","cls","contains","parentNode","map","tok","trim","chars","Array","from","result","skipNext","next","join"],"mappings":"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"}